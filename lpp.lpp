%{
#include "hpp.hpp"
string LexString;
%}
%option noyywrap yylineno
%x lexstring docstring
S [\+\-]?
N [0-9]+
%%
#[^\n]*			{}						/* line comment			*/

^\.end			{yyterminate();}		/* .end directive		*/

'				{BEGIN(lexstring); LexString="";}
\"				{BEGIN(docstring); LexString="";}
<lexstring>'	{BEGIN(INITIAL); yylval.o = new Str(LexString); return STR;}
<docstring>\"	{BEGIN(INITIAL); yylval.o = new Doc(LexString); return DOC;}
<lexstring,docstring>\\.	{LexString+=yytext[1];}
<lexstring,docstring>.		{LexString+=yytext[0];}

{S}{N}[eE]{S}{N}	TOC(Num,NUM)		/* numbers				*/
{S}{N}\.{N}			TOC(Num,NUM)
{S}{N}				TOC(Int,NUM)

\(					TOC(Op,LP)			/* brackets				*/
\)					TOC(Op,RP)
\[					TOC(Op,LQ)
\]					TOC(Op,RQ)
\{					TOC(Op,LC)
\}					TOC(Op,RC)

\=					TOC(Op,EQ)			/* operators			*/
\@					TOC(Op,AT)
\:					TOC(Op,COLON)
\~					TOC(Op,OP)

\+					TOC(Op,ADD)
\-					TOC(Op,SUB)
\*					TOC(Op,MUL)
\/					TOC(Op,DIV)
\^					TOC(Op,POW)

\%					TOC(Op,PERC)
\$					TOC(Op,DOLLAR)

\<					TOC(Op,LL)
\>					TOC(Op,GG)
\&					TOC(Op,OP)
\|					TOC(Op,OP)

[a-zA-Z0-9_.?]+		TOC(Sym,SYM)		/* symbol				*/

[ \t\r\n]+			{}					/* drop spaces			*/
.					{yyerror("lexer");}	/* any undetected char	*/
%%
