%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR DOC		/* symbol number string docstring	*/
%token <o> LP RP LQ RQ LC RC	/* () [] {}							*/
%token <o> OP EQ PERC			/* op = %							*/
%token <o> ADD SUB MUL DIV POW	/* + - * / ^						*/
%type <o> ex scalar vector		/* expresion scalar vector			*/
%type <o> addeq

%left EQ
%left PERC
%left ADD SUB
%left MUL DIV
%left POW
%left PFX
%%
REPL : | REPL ex { cout << $2->dump() << endl; } ;
scalar : SYM | NUM | STR ;
ex : scalar | DOC | OP
	| LP ex RP				{ $$=$2; }
	| LQ vector RQ			{ $$=$2; }
	| ex EQ ex				{ $$=$2; $2->push($1); $2->push($3); }
	| ex PERC ex			{ $$=$2; $2->push($1); $2->push($3); }
	| ADD ex %prec PFX		{ $$=$1; $1->push($2); }
	| SUB ex %prec PFX		{ $$=$1; $1->push($2); }
	| ex ADD ex				{ $$=$2; $2->push($1); $2->push($3); }
	| ex SUB ex				{ $$=$2; $2->push($1); $2->push($3); }
	| ex MUL ex				{ $$=$2; $2->push($1); $2->push($3); }
	| ex DIV ex				{ $$=$2; $2->push($1); $2->push($3); }
	| ex POW ex				{ $$=$2; $2->push($1); $2->push($3); }
	| ex addeq ex			{ $$=$2; $2->push($1); $2->push($3); }
;
addeq : ADD EQ				{ $$=new Op("+="); }
vector :					{ $$=new Vector(); }
	| vector ex				{ $$=$1; $$->push($2); }
;
%%
